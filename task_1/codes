# Longest Continuous Increasing Subsequence

class Solution(object):
    def findLengthOfLCIS(self, nums):
        if not nums:
            return 0
        
        max_length = 1  # To store the maximum length found
        current_length = 1  # To store the current subsequence length
        
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                current_length += 1
                max_length = max(max_length, current_length)
            else:
                current_length = 1 
        
        return max_length


# Merge Sorted Array

class Solution(object):
    def merge(self, nums1, m, nums2, n):
        i = m - 1  # Pointer for nums1
        j = n - 1  # Pointer for nums2
        k = m + n - 1  # Position to fill in nums1

        while i >= 0 and j >= 0:
            if nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
            k -= 1

        # To copy, if there are remaining elements
        while j >= 0:
            nums1[k] = nums2[j]
            j -= 1
            k -= 1

# Intersection of two arrays

class Solution:
    def intersection(self, nums1, nums2):
        # Convert both lists to sets to remove duplicates
        set1 = set(nums1)
        set2 = set(nums2)
        
        result = []

        # Check for presence in set1, add to result
        for num in set2:
            if num in set1:
                result.append(num)

        return result

